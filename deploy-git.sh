#!/bin/bash

# üöÄ Git-Integrated SaaS Deployment Script
# Deploys with full git support for automatic platform updates
# Usage: curl -sSL https://raw.githubusercontent.com/heynoblehero/mighai-test/main/deploy-git.sh | bash -s -- --domain=example.com --email=admin@example.com

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
DOMAIN=""
EMAIL=""
REPO_URL="https://github.com/heynoblehero/mighai-test.git"
BRANCH="main"
APP_DIR="/opt/saas-app"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --domain=*)
            DOMAIN="${1#*=}"
            shift
            ;;
        --email=*)
            EMAIL="${1#*=}"
            shift
            ;;
        --repo=*)
            REPO_URL="${1#*=}"
            shift
            ;;
        --branch=*)
            BRANCH="${1#*=}"
            shift
            ;;
        --help)
            echo "Git-Integrated SaaS Deployment Script"
            echo ""
            echo "Usage: $0 --domain=example.com --email=admin@example.com"
            echo ""
            echo "Options:"
            echo "  --domain=DOMAIN    Your domain name (required)"
            echo "  --email=EMAIL      Admin email for SSL certificates (required)"
            echo "  --repo=URL         Git repository URL (default: heynoblehero/mighai-test)"
            echo "  --branch=BRANCH    Git branch to deploy (default: main)"
            echo "  --help             Show this help message"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Unknown parameter: $1${NC}"
            exit 1
            ;;
    esac
done

# Validate required parameters
if [ -z "$DOMAIN" ] || [ -z "$EMAIL" ]; then
    echo -e "${RED}‚ùå Missing required parameters${NC}"
    echo "Usage: $0 --domain=example.com --email=admin@example.com"
    exit 1
fi

echo -e "${GREEN}üöÄ Starting Git-Integrated SaaS Deployment${NC}"
echo -e "${BLUE}üìã Configuration:${NC}"
echo "   Domain: $DOMAIN"
echo "   Email: $EMAIL"
echo "   Repository: $REPO_URL"
echo "   Branch: $BRANCH"
echo "   Install Directory: $APP_DIR"
echo ""

# Detect OS
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
    VERSION=$VERSION_ID
    echo -e "${BLUE}üñ•Ô∏è  Detected OS: $OS $VERSION${NC}"
else
    echo -e "${RED}‚ùå Cannot detect OS. This script supports Ubuntu, CentOS, and Fedora.${NC}"
    exit 1
fi

# Install Docker and Docker Compose
echo -e "${BLUE}üê≥ Installing Docker...${NC}"
if ! command -v docker &> /dev/null; then
    curl -fsSL https://get.docker.com | sh
    systemctl enable docker
    systemctl start docker
    echo -e "${GREEN}‚úÖ Docker installed successfully${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker already installed${NC}"
fi

# Install Docker Compose
if ! command -v docker-compose &> /dev/null; then
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    echo -e "${GREEN}‚úÖ Docker Compose installed successfully${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose already installed${NC}"
fi

# Install Git
echo -e "${BLUE}üì¶ Installing Git...${NC}"
case $OS in
    *"Ubuntu"*|*"Debian"*)
        apt-get update && apt-get install -y git curl wget
        ;;
    *"CentOS"*|*"Red Hat"*)
        yum install -y git curl wget
        ;;
    *"Fedora"*)
        dnf install -y git curl wget
        ;;
    *)
        echo -e "${YELLOW}‚ö†Ô∏è  Unsupported OS for automatic git installation${NC}"
        ;;
esac

# Create deploy user
if ! id deploy &>/dev/null; then
    echo -e "${BLUE}üë§ Creating deploy user...${NC}"
    useradd -m -s /bin/bash deploy
    usermod -aG docker deploy
    echo -e "${GREEN}‚úÖ Deploy user created${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Deploy user already exists${NC}"
fi

# Create application directory
echo -e "${BLUE}üìÅ Setting up application directory...${NC}"
mkdir -p $APP_DIR
cd $APP_DIR

# Clone or update repository
if [ -d ".git" ]; then
    echo -e "${BLUE}üîÑ Updating existing repository...${NC}"
    git fetch origin
    git reset --hard origin/$BRANCH
    echo -e "${GREEN}‚úÖ Repository updated to latest ${BRANCH}${NC}"
else
    echo -e "${BLUE}üì• Cloning repository...${NC}"
    git clone --branch $BRANCH $REPO_URL .
    echo -e "${GREEN}‚úÖ Repository cloned successfully${NC}"
fi

# Show current version
CURRENT_VERSION=$(git rev-parse --short HEAD)
echo -e "${GREEN}üè∑Ô∏è  Current version: $CURRENT_VERSION${NC}"

# Generate secure keys
echo -e "${BLUE}üîê Generating secure keys...${NC}"
SESSION_SECRET=$(openssl rand -hex 32)
ENCRYPTION_KEY=$(openssl rand -hex 32)

# Create environment file
echo -e "${BLUE}‚öôÔ∏è  Creating environment configuration...${NC}"
cat > .env << EOF
# Generated by deploy-git.sh on $(date)
NODE_ENV=production
DOMAIN=$DOMAIN
ADMIN_EMAIL=$EMAIL
DATABASE_URL=sqlite:./data/production.db
SESSION_SECRET=$SESSION_SECRET
ENCRYPTION_KEY=$ENCRYPTION_KEY

# Optional API Keys (configure these later)
OPENAI_API_KEY=
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# Git Configuration
GIT_REPO_URL=$REPO_URL
GIT_BRANCH=$BRANCH
EOF

# Set proper permissions
chown -R deploy:deploy $APP_DIR
chmod 600 .env

# Create data directories
mkdir -p data uploads logs ssl
chown -R deploy:deploy data uploads logs ssl

# Build and start the application
echo -e "${BLUE}üèóÔ∏è  Building application with git integration...${NC}"
docker-compose -f docker-compose.prod.yml down --remove-orphans 2>/dev/null || true
docker-compose -f docker-compose.prod.yml build --no-cache --build-arg REPO_URL=$REPO_URL --build-arg BRANCH=$BRANCH

echo -e "${BLUE}üöÄ Starting services...${NC}"
docker-compose -f docker-compose.prod.yml up -d

# Create systemd service for auto-restart
echo -e "${BLUE}üîß Creating systemd service...${NC}"
cat > /etc/systemd/system/saas-app.service << EOF
[Unit]
Description=SaaS Application with Git Integration
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$APP_DIR
ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
ExecReload=/usr/local/bin/docker-compose -f docker-compose.prod.yml restart
TimeoutStartSec=300
User=root

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable saas-app
echo -e "${GREEN}‚úÖ Systemd service created and enabled${NC}"

# Create update script
echo -e "${BLUE}üìù Creating update script...${NC}"
cat > update-platform.sh << 'EOF'
#!/bin/bash
set -e
cd /opt/saas-app

echo "üîÑ Updating platform..."
git fetch origin
git reset --hard origin/main

echo "üèóÔ∏è  Rebuilding application..."
docker-compose -f docker-compose.prod.yml build --no-cache

echo "üöÄ Restarting services..."
docker-compose -f docker-compose.prod.yml up -d

echo "‚úÖ Platform updated successfully!"
echo "üè∑Ô∏è  New version: $(git rev-parse --short HEAD)"
EOF

chmod +x update-platform.sh
chown deploy:deploy update-platform.sh

# Setup firewall
echo -e "${BLUE}üî• Configuring firewall...${NC}"
if command -v ufw &> /dev/null; then
    ufw --force enable
    ufw allow ssh
    ufw allow 80/tcp
    ufw allow 443/tcp
    echo -e "${GREEN}‚úÖ UFW firewall configured${NC}"
elif command -v firewall-cmd &> /dev/null; then
    systemctl enable firewalld
    systemctl start firewalld
    firewall-cmd --permanent --add-service=http
    firewall-cmd --permanent --add-service=https
    firewall-cmd --permanent --add-service=ssh
    firewall-cmd --reload
    echo -e "${GREEN}‚úÖ Firewalld configured${NC}"
fi

# Wait for application to start
echo -e "${BLUE}‚è≥ Waiting for application to start...${NC}"
sleep 30

# Check if application is running
if curl -f http://localhost:3000/api/health &>/dev/null; then
    echo -e "${GREEN}‚úÖ Application is running successfully!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Application may still be starting...${NC}"
fi

# Final instructions
echo ""
echo -e "${GREEN}üéâ Git-Integrated SaaS Platform Deployment Complete!${NC}"
echo ""
echo -e "${BLUE}üìã What was deployed:${NC}"
echo "   ‚úÖ Docker containers with git integration"
echo "   ‚úÖ Automatic SSL certificates (Let's Encrypt)"
echo "   ‚úÖ Git repository: $REPO_URL"
echo "   ‚úÖ Current version: $CURRENT_VERSION"
echo "   ‚úÖ Platform update system enabled"
echo "   ‚úÖ Health monitoring and auto-restart"
echo ""
echo -e "${BLUE}üåê Access your platform:${NC}"
echo "   ‚Ä¢ Application: https://$DOMAIN"
echo "   ‚Ä¢ Admin Panel: https://$DOMAIN/admin"
echo "   ‚Ä¢ Health Check: https://$DOMAIN/api/health"
echo ""
echo -e "${BLUE}üîß Platform Management:${NC}"
echo "   ‚Ä¢ Update Platform: ./update-platform.sh"
echo "   ‚Ä¢ View Logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   ‚Ä¢ Restart: systemctl restart saas-app"
echo "   ‚Ä¢ Status: docker-compose -f docker-compose.prod.yml ps"
echo ""
echo -e "${BLUE}‚öôÔ∏è  Next Steps:${NC}"
echo "   1. Point your domain DNS to this server's IP: $(curl -s ifconfig.me || echo 'unknown')"
echo "   2. Wait 5-10 minutes for SSL certificate generation"
echo "   3. Configure API keys in: $APP_DIR/.env"
echo "   4. Access admin panel and configure Telegram bots at: https://$DOMAIN/admin/telegram-bots"
echo ""
echo -e "${GREEN}üöÄ Your platform now supports automatic updates via the admin panel!${NC}"