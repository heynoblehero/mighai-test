{
  "html_code": "<!-- Customer Chat Component -->\n<div class=\"customer-chat\" id=\"customerChat\">\n  <!-- Chat Toggle Button -->\n  <button class=\"chat-toggle-btn\" id=\"chatToggleBtn\" onclick=\"toggleChat()\">\n    <span class=\"chat-icon\">ðŸ’¬</span>\n    <span class=\"unread-badge\" id=\"unreadBadge\" style=\"display: none;\">0</span>\n  </button>\n  \n  <!-- Chat Window -->\n  <div class=\"chat-window\" id=\"chatWindow\">\n    <!-- Chat Header -->\n    <div class=\"chat-header\">\n      <div class=\"chat-title\">\n        <h3>Support Chat</h3>\n        <p class=\"chat-subtitle\">We're here to help!</p>\n      </div>\n      <button class=\"chat-close-btn\" onclick=\"toggleChat()\">\n        <span>âœ•</span>\n      </button>\n    </div>\n    \n    <!-- Chat Messages -->\n    <div class=\"chat-messages\" id=\"chatMessages\">\n      <div class=\"chat-welcome\">\n        <div class=\"welcome-icon\">ðŸ‘‹</div>\n        <h4>Welcome to Support!</h4>\n        <p>Send us a message and we'll get back to you as soon as possible.</p>\n      </div>\n    </div>\n    \n    <!-- Chat Input -->\n    <div class=\"chat-input\">\n      <form class=\"chat-form\" id=\"chatForm\" onsubmit=\"sendChatMessage(event)\">\n        <input \n          type=\"text\" \n          id=\"chatMessageInput\" \n          placeholder=\"Type your message...\" \n          class=\"chat-input-field\"\n          maxlength=\"500\"\n        />\n        <button type=\"submit\" class=\"chat-send-btn\" id=\"chatSendBtn\">\n          <span class=\"send-icon\">âž¤</span>\n        </button>\n      </form>\n    </div>\n  </div>\n  \n  <!-- Chat Overlay for mobile -->\n  <div class=\"chat-overlay\" id=\"chatOverlay\" onclick=\"toggleChat()\"></div>\n</div>\n\n<style>\n.customer-chat {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 2000;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n.chat-toggle-btn {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border: none;\n  box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.chat-toggle-btn:hover {\n  transform: scale(1.1);\n  box-shadow: 0 6px 25px rgba(102, 126, 234, 0.6);\n}\n\n.chat-icon {\n  font-size: 24px;\n  color: white;\n}\n\n.unread-badge {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background: #ff4757;\n  color: white;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.chat-window {\n  position: absolute;\n  bottom: 80px;\n  right: 0;\n  width: 380px;\n  height: 500px;\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);\n  overflow: hidden;\n  transform: scale(0) translateY(20px);\n  opacity: 0;\n  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-window.open {\n  transform: scale(1) translateY(0);\n  opacity: 1;\n}\n\n.chat-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.chat-title h3 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.chat-subtitle {\n  margin: 4px 0 0 0;\n  font-size: 14px;\n  opacity: 0.9;\n}\n\n.chat-close-btn {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 5px;\n  border-radius: 4px;\n  transition: background 0.2s;\n}\n\n.chat-close-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.chat-messages {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.chat-welcome {\n  text-align: center;\n  color: #666;\n  padding: 20px 0;\n}\n\n.welcome-icon {\n  font-size: 48px;\n  margin-bottom: 12px;\n}\n\n.chat-welcome h4 {\n  margin: 0 0 8px 0;\n  font-size: 18px;\n  color: #333;\n}\n\n.chat-welcome p {\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.4;\n}\n\n.chat-message {\n  max-width: 80%;\n  padding: 12px 16px;\n  border-radius: 18px;\n  font-size: 14px;\n  line-height: 1.4;\n  word-wrap: break-word;\n}\n\n.chat-message.user {\n  background: #667eea;\n  color: white;\n  align-self: flex-end;\n  border-bottom-right-radius: 4px;\n}\n\n.chat-message.admin {\n  background: #f1f3f4;\n  color: #333;\n  align-self: flex-start;\n  border-bottom-left-radius: 4px;\n}\n\n.message-time {\n  font-size: 11px;\n  opacity: 0.7;\n  margin-top: 4px;\n}\n\n.chat-input {\n  padding: 16px;\n  border-top: 1px solid #eee;\n  background: #fafafa;\n}\n\n.chat-form {\n  display: flex;\n  gap: 12px;\n  align-items: center;\n}\n\n.chat-input-field {\n  flex: 1;\n  padding: 12px 16px;\n  border: 1px solid #ddd;\n  border-radius: 24px;\n  outline: none;\n  font-size: 14px;\n  transition: border-color 0.2s;\n}\n\n.chat-input-field:focus {\n  border-color: #667eea;\n}\n\n.chat-send-btn {\n  width: 44px;\n  height: 44px;\n  border-radius: 50%;\n  background: #667eea;\n  border: none;\n  color: white;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s;\n}\n\n.chat-send-btn:hover {\n  background: #5a67d8;\n  transform: scale(1.05);\n}\n\n.chat-send-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.send-icon {\n  font-size: 16px;\n}\n\n.chat-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.3);\n  opacity: 0;\n  visibility: hidden;\n  transition: all 0.3s;\n}\n\n.chat-overlay.open {\n  opacity: 1;\n  visibility: visible;\n}\n\n@media (max-width: 768px) {\n  .chat-window {\n    width: calc(100vw - 40px);\n    height: 70vh;\n    bottom: 20px;\n    right: 20px;\n    left: 20px;\n  }\n}\n</style>\n\n<script>\nlet chatOpen = false;\nlet chatMessages = [];\nlet unreadCount = 0;\n\nfunction toggleChat() {\n  chatOpen = !chatOpen;\n  const chatWindow = document.getElementById('chatWindow');\n  const chatOverlay = document.getElementById('chatOverlay');\n  \n  if (chatOpen) {\n    chatWindow.classList.add('open');\n    chatOverlay.classList.add('open');\n    loadChatMessages();\n    markMessagesAsRead();\n  } else {\n    chatWindow.classList.remove('open');\n    chatOverlay.classList.remove('open');\n  }\n}\n\nfunction sendChatMessage(event) {\n  event.preventDefault();\n  \n  const input = document.getElementById('chatMessageInput');\n  const sendBtn = document.getElementById('chatSendBtn');\n  const message = input.value.trim();\n  \n  if (!message) return;\n  \n  // Disable input while sending\n  input.disabled = true;\n  sendBtn.disabled = true;\n  \n  // Add user message to UI immediately\n  addMessageToUI({\n    id: Date.now(),\n    message: message,\n    sender_type: 'customer',\n    created_at: new Date().toISOString()\n  });\n  \n  // Clear input\n  input.value = '';\n  \n  // Send to server\n  fetch('/api/support/messages', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ message: message })\n  })\n  .then(response => response.json())\n  .then(data => {\n    console.log('Message sent successfully');\n  })\n  .catch(error => {\n    console.error('Failed to send message:', error);\n    showChatError('Failed to send message. Please try again.');\n  })\n  .finally(() => {\n    input.disabled = false;\n    sendBtn.disabled = false;\n    input.focus();\n  });\n}\n\nfunction loadChatMessages() {\n  fetch('/api/support/messages')\n    .then(response => response.json())\n    .then(messages => {\n      chatMessages = messages;\n      renderChatMessages();\n    })\n    .catch(error => {\n      console.error('Failed to load messages:', error);\n    });\n}\n\nfunction renderChatMessages() {\n  const messagesContainer = document.getElementById('chatMessages');\n  \n  // Clear existing messages except welcome\n  const existingMessages = messagesContainer.querySelectorAll('.chat-message');\n  existingMessages.forEach(msg => msg.remove());\n  \n  chatMessages.forEach(message => {\n    addMessageToUI(message, false);\n  });\n  \n  scrollChatToBottom();\n}\n\nfunction addMessageToUI(message, scroll = true) {\n  const messagesContainer = document.getElementById('chatMessages');\n  \n  // Hide welcome message if this is the first real message\n  const welcomeMsg = messagesContainer.querySelector('.chat-welcome');\n  if (welcomeMsg && chatMessages.length === 0) {\n    welcomeMsg.style.display = 'none';\n  }\n  \n  const messageEl = document.createElement('div');\n  messageEl.className = `chat-message ${message.sender_type === 'customer' ? 'user' : 'admin'}`;\n  messageEl.innerHTML = `\n    <div class=\"message-text\">${escapeHtml(message.message)}</div>\n    <div class=\"message-time\">${formatTime(message.created_at)}</div>\n  `;\n  \n  messagesContainer.appendChild(messageEl);\n  \n  if (scroll) {\n    scrollChatToBottom();\n  }\n}\n\nfunction scrollChatToBottom() {\n  const messagesContainer = document.getElementById('chatMessages');\n  messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\nfunction showChatError(message) {\n  const messagesContainer = document.getElementById('chatMessages');\n  const errorEl = document.createElement('div');\n  errorEl.style.cssText = 'color: #ff4757; text-align: center; padding: 10px; font-size: 14px;';\n  errorEl.textContent = message;\n  messagesContainer.appendChild(errorEl);\n  \n  setTimeout(() => errorEl.remove(), 5000);\n}\n\nfunction formatTime(dateString) {\n  const date = new Date(dateString);\n  // Use consistent format to prevent hydration issues\n  return date.toISOString().split('T')[1].split('.')[0].substring(0, 5); // HH:MM format\n}\n\nfunction escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\nfunction checkUnreadMessages() {\n  if (!chatOpen) {\n    fetch('/api/support/messages')\n      .then(response => response.json())\n      .then(messages => {\n        const unread = messages.filter(msg => \n          msg.sender_type === 'admin' && !msg.is_read\n        ).length;\n        updateUnreadBadge(unread);\n      })\n      .catch(error => {\n        console.error('Failed to check unread messages:', error);\n      });\n  }\n}\n\nfunction updateUnreadBadge(count) {\n  const badge = document.getElementById('unreadBadge');\n  if (count > 0) {\n    badge.textContent = count > 9 ? '9+' : count;\n    badge.style.display = 'flex';\n  } else {\n    badge.style.display = 'none';\n  }\n}\n\nfunction markMessagesAsRead() {\n  fetch('/api/support/messages/read', { method: 'PUT' })\n    .then(() => {\n      updateUnreadBadge(0);\n    })\n    .catch(error => {\n      console.error('Failed to mark messages as read:', error);\n    });\n}\n\n// Initialize chat\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Check for unread messages every 30 seconds\n  checkUnreadMessages();\n  setInterval(checkUnreadMessages, 30000);\n  \n  // Handle enter key in chat input\n  const chatInput = document.getElementById('chatMessageInput');\n  if (chatInput) {\n    chatInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        document.getElementById('chatForm').dispatchEvent(new Event('submit'));\n      }\n    });\n  }\n});\n</script>",
  "chat_history": [],
  "title": "Customer Chat",
  "pageType": "customer-chat",
  "lastModified": "2025-08-15T01:57:00.000Z",
  "version": 1
}