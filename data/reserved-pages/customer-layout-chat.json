{
  "html_code": "<!-- Customer Layout Chat Component -->\n<div class=\"customer-layout-chat\">\n    <div class=\"chat-widget\">\n        <!-- Chat Toggle Button -->\n        <button class=\"chat-toggle\" onclick=\"toggleChat()\" id=\"chatToggle\">\n            <span class=\"chat-icon\">ðŸ’¬</span>\n            <span class=\"chat-badge\" id=\"chatBadge\" style=\"display: none;\">0</span>\n        </button>\n        \n        <!-- Chat Window -->\n        <div class=\"chat-window\" id=\"chatWindow\">\n            <div class=\"chat-header\">\n                <div class=\"chat-title\">\n                    <h4>Support Chat</h4>\n                    <p class=\"chat-status\">We're online!</p>\n                </div>\n                <button onclick=\"toggleChat()\" class=\"chat-close\" title=\"Close chat\">\n                    <span>âœ•</span>\n                </button>\n            </div>\n            \n            <div class=\"chat-messages\" id=\"chatMessages\">\n                <div class=\"chat-welcome\">\n                    <div class=\"welcome-avatar\">ðŸ‘‹</div>\n                    <div class=\"welcome-text\">\n                        <h5>Hello! How can we help you today?</h5>\n                        <p>We typically respond within a few minutes.</p>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"chat-input-container\">\n                <form class=\"chat-form\" onsubmit=\"sendMessage(event)\" id=\"chatForm\">\n                    <div class=\"chat-input-wrapper\">\n                        <input \n                            type=\"text\" \n                            id=\"messageInput\" \n                            placeholder=\"Type your message...\" \n                            class=\"chat-input\"\n                            maxlength=\"500\"\n                            autocomplete=\"off\"\n                        >\n                        <button type=\"submit\" class=\"send-btn\" id=\"sendBtn\">\n                            <span class=\"send-icon\">âž¤</span>\n                        </button>\n                    </div>\n                    <div class=\"chat-options\">\n                        <button type=\"button\" class=\"quick-action\" onclick=\"sendQuickMessage('I need help with billing')\">\n                            ðŸ’³ Billing Help\n                        </button>\n                        <button type=\"button\" class=\"quick-action\" onclick=\"sendQuickMessage('I have a technical issue')\">\n                            ðŸ”§ Technical Support\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n        \n        <!-- Chat Overlay for mobile -->\n        <div class=\"chat-overlay\" id=\"chatOverlay\" onclick=\"toggleChat()\"></div>\n    </div>\n</div>\n\n<style>\n.customer-layout-chat {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    z-index: 2000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n.chat-toggle {\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border: none;\n    color: white;\n    cursor: pointer;\n    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);\n    position: relative;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.chat-toggle:hover {\n    transform: scale(1.1);\n    box-shadow: 0 6px 25px rgba(102, 126, 234, 0.6);\n}\n\n.chat-toggle:active {\n    transform: scale(0.95);\n}\n\n.chat-icon {\n    font-size: 24px;\n    transition: transform 0.3s ease;\n}\n\n.chat-toggle.open .chat-icon {\n    transform: rotate(180deg);\n}\n\n.chat-badge {\n    position: absolute;\n    top: -5px;\n    right: -5px;\n    background: #ff4757;\n    color: white;\n    border-radius: 50%;\n    width: 24px;\n    height: 24px;\n    font-size: 12px;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n.chat-window {\n    position: absolute;\n    bottom: 80px;\n    right: 0;\n    width: 380px;\n    height: 500px;\n    background: white;\n    border-radius: 16px;\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n    display: none;\n    flex-direction: column;\n    overflow: hidden;\n    transform: scale(0.8) translateY(20px);\n    opacity: 0;\n    transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.chat-window.open {\n    display: flex;\n    transform: scale(1) translateY(0);\n    opacity: 1;\n}\n\n.chat-header {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 20px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.chat-title h4 {\n    margin: 0;\n    font-size: 18px;\n    font-weight: 600;\n}\n\n.chat-status {\n    margin: 4px 0 0 0;\n    font-size: 13px;\n    opacity: 0.9;\n}\n\n.chat-close {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 20px;\n    cursor: pointer;\n    padding: 8px;\n    border-radius: 50%;\n    transition: all 0.2s;\n    width: 36px;\n    height: 36px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.chat-close:hover {\n    background: rgba(255, 255, 255, 0.2);\n}\n\n.chat-messages {\n    flex: 1;\n    padding: 20px;\n    overflow-y: auto;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.chat-welcome {\n    display: flex;\n    align-items: flex-start;\n    gap: 12px;\n    padding: 16px;\n    background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);\n    border-radius: 12px;\n    border-left: 4px solid #667eea;\n}\n\n.welcome-avatar {\n    font-size: 32px;\n    width: 48px;\n    height: 48px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: white;\n    border-radius: 50%;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.welcome-text h5 {\n    margin: 0 0 6px 0;\n    font-size: 16px;\n    color: #2d3748;\n}\n\n.welcome-text p {\n    margin: 0;\n    font-size: 14px;\n    color: #718096;\n    line-height: 1.4;\n}\n\n.chat-message {\n    max-width: 85%;\n    padding: 12px 16px;\n    border-radius: 18px;\n    font-size: 14px;\n    line-height: 1.4;\n    word-wrap: break-word;\n    position: relative;\n}\n\n.chat-message.user {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    align-self: flex-end;\n    border-bottom-right-radius: 6px;\n}\n\n.chat-message.bot {\n    background: #f1f3f4;\n    color: #333;\n    align-self: flex-start;\n    border-bottom-left-radius: 6px;\n}\n\n.message-time {\n    font-size: 11px;\n    opacity: 0.7;\n    margin-top: 6px;\n    text-align: right;\n}\n\n.chat-input-container {\n    padding: 16px 20px 20px;\n    background: #fafbfc;\n    border-top: 1px solid #e2e8f0;\n}\n\n.chat-input-wrapper {\n    display: flex;\n    gap: 12px;\n    align-items: flex-end;\n    margin-bottom: 12px;\n}\n\n.chat-input {\n    flex: 1;\n    padding: 12px 16px;\n    border: 1px solid #e2e8f0;\n    border-radius: 24px;\n    outline: none;\n    font-size: 14px;\n    transition: all 0.2s;\n    resize: none;\n    font-family: inherit;\n}\n\n.chat-input:focus {\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.send-btn {\n    width: 44px;\n    height: 44px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border: none;\n    color: white;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s;\n}\n\n.send-btn:hover {\n    transform: scale(1.05);\n    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n}\n\n.send-btn:disabled {\n    background: #cbd5e0;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n}\n\n.send-icon {\n    font-size: 16px;\n}\n\n.chat-options {\n    display: flex;\n    gap: 8px;\n    flex-wrap: wrap;\n}\n\n.quick-action {\n    background: white;\n    border: 1px solid #e2e8f0;\n    color: #4a5568;\n    padding: 8px 12px;\n    border-radius: 20px;\n    cursor: pointer;\n    font-size: 12px;\n    transition: all 0.2s;\n    white-space: nowrap;\n}\n\n.quick-action:hover {\n    background: #667eea;\n    color: white;\n    border-color: #667eea;\n}\n\n.chat-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.3);\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s;\n}\n\n.chat-overlay.open {\n    opacity: 1;\n    visibility: visible;\n}\n\n@media (max-width: 768px) {\n    .chat-window {\n        width: calc(100vw - 40px);\n        height: 70vh;\n        bottom: 80px;\n        right: 20px;\n        left: 20px;\n    }\n    \n    .chat-options {\n        justify-content: center;\n    }\n}\n</style>\n\n<script>\nlet chatOpen = false;\nlet messageHistory = [];\nlet unreadCount = 0;\n\nfunction toggleChat() {\n    chatOpen = !chatOpen;\n    const chatWindow = document.getElementById('chatWindow');\n    const chatOverlay = document.getElementById('chatOverlay');\n    const chatToggle = document.getElementById('chatToggle');\n    \n    if (chatOpen) {\n        chatWindow.classList.add('open');\n        chatOverlay.classList.add('open');\n        chatToggle.classList.add('open');\n        \n        // Focus input when opening\n        const messageInput = document.getElementById('messageInput');\n        setTimeout(() => messageInput.focus(), 300);\n        \n        // Mark messages as read\n        markMessagesAsRead();\n        loadChatHistory();\n    } else {\n        chatWindow.classList.remove('open');\n        chatOverlay.classList.remove('open');\n        chatToggle.classList.remove('open');\n    }\n}\n\nfunction sendMessage(event) {\n    event.preventDefault();\n    \n    const input = document.getElementById('messageInput');\n    const sendBtn = document.getElementById('sendBtn');\n    const message = input.value.trim();\n    \n    if (!message) return;\n    \n    // Disable input while sending\n    input.disabled = true;\n    sendBtn.disabled = true;\n    \n    // Add user message to UI\n    addMessageToChat({\n        message: message,\n        sender_type: 'customer',\n        timestamp: new Date().toISOString()\n    });\n    \n    // Clear input\n    input.value = '';\n    \n    // Send to server\n    fetch('/api/support/messages', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message: message })\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log('Message sent successfully');\n        // Simulate bot response after a delay\n        setTimeout(() => {\n            simulateBotResponse(message);\n        }, 1500);\n    })\n    .catch(error => {\n        console.error('Failed to send message:', error);\n        showChatError('Failed to send message. Please try again.');\n    })\n    .finally(() => {\n        input.disabled = false;\n        sendBtn.disabled = false;\n        input.focus();\n    });\n}\n\nfunction sendQuickMessage(message) {\n    const input = document.getElementById('messageInput');\n    input.value = message;\n    \n    // Trigger form submission\n    const form = document.getElementById('chatForm');\n    form.dispatchEvent(new Event('submit'));\n}\n\nfunction addMessageToChat(message) {\n    const messagesContainer = document.getElementById('chatMessages');\n    \n    // Hide welcome message after first user message\n    const welcomeMsg = messagesContainer.querySelector('.chat-welcome');\n    if (welcomeMsg && message.sender_type === 'customer') {\n        welcomeMsg.style.display = 'none';\n    }\n    \n    const messageEl = document.createElement('div');\n    messageEl.className = `chat-message ${message.sender_type === 'customer' ? 'user' : 'bot'}`;\n    \n    const timeString = formatTime(message.timestamp);\n    messageEl.innerHTML = `\n        <div class=\"message-text\">${escapeHtml(message.message)}</div>\n        <div class=\"message-time\">${timeString}</div>\n    `;\n    \n    messagesContainer.appendChild(messageEl);\n    scrollChatToBottom();\n    \n    // Add to history\n    messageHistory.push(message);\n}\n\nfunction simulateBotResponse(userMessage) {\n    const responses = {\n        'billing': 'I can help you with billing questions. What specific billing issue are you experiencing?',\n        'technical': 'I\\'m here to help with technical issues. Can you describe what problem you\\'re encountering?',\n        'support': 'Our support team is ready to assist you. How can we help today?',\n        'help': 'I\\'m happy to help! What do you need assistance with?',\n        'default': 'Thank you for your message. A support representative will respond shortly. Is there anything specific I can help you with right now?'\n    };\n    \n    let response = responses.default;\n    const lowerMessage = userMessage.toLowerCase();\n    \n    if (lowerMessage.includes('billing') || lowerMessage.includes('payment') || lowerMessage.includes('subscription')) {\n        response = responses.billing;\n    } else if (lowerMessage.includes('technical') || lowerMessage.includes('bug') || lowerMessage.includes('error')) {\n        response = responses.technical;\n    } else if (lowerMessage.includes('help') || lowerMessage.includes('assist')) {\n        response = responses.help;\n    }\n    \n    addMessageToChat({\n        message: response,\n        sender_type: 'support',\n        timestamp: new Date().toISOString()\n    });\n}\n\nfunction loadChatHistory() {\n    fetch('/api/support/messages')\n        .then(response => response.json())\n        .then(messages => {\n            // Clear existing messages except welcome\n            const messagesContainer = document.getElementById('chatMessages');\n            const existingMessages = messagesContainer.querySelectorAll('.chat-message');\n            existingMessages.forEach(msg => msg.remove());\n            \n            // Add loaded messages\n            messages.forEach(message => {\n                addMessageToChat(message);\n            });\n        })\n        .catch(error => {\n            console.error('Failed to load chat history:', error);\n        });\n}\n\nfunction checkUnreadMessages() {\n    if (!chatOpen) {\n        fetch('/api/support/messages/unread')\n            .then(response => response.json())\n            .then(data => {\n                updateUnreadBadge(data.count || 0);\n            })\n            .catch(error => {\n                console.error('Failed to check unread messages:', error);\n            });\n    }\n}\n\nfunction updateUnreadBadge(count) {\n    const badge = document.getElementById('chatBadge');\n    if (count > 0) {\n        badge.textContent = count > 9 ? '9+' : count;\n        badge.style.display = 'flex';\n    } else {\n        badge.style.display = 'none';\n    }\n}\n\nfunction markMessagesAsRead() {\n    fetch('/api/support/messages/read', { method: 'PUT' })\n        .then(() => {\n            updateUnreadBadge(0);\n        })\n        .catch(error => {\n            console.error('Failed to mark messages as read:', error);\n        });\n}\n\nfunction scrollChatToBottom() {\n    const messagesContainer = document.getElementById('chatMessages');\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\nfunction showChatError(message) {\n    const messagesContainer = document.getElementById('chatMessages');\n    const errorEl = document.createElement('div');\n    errorEl.style.cssText = `\n        color: #ff4757; \n        text-align: center; \n        padding: 12px; \n        font-size: 14px;\n        background: #ffe8e8;\n        border-radius: 8px;\n        margin: 8px 0;\n    `;\n    errorEl.textContent = message;\n    messagesContainer.appendChild(errorEl);\n    \n    setTimeout(() => errorEl.remove(), 5000);\n    scrollChatToBottom();\n}\n\nfunction formatTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n}\n\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\n// Initialize chat\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Check for unread messages periodically\n    checkUnreadMessages();\n    setInterval(checkUnreadMessages, 30000);\n    \n    // Handle enter key in chat input\n    const chatInput = document.getElementById('messageInput');\n    if (chatInput) {\n        chatInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                document.getElementById('chatForm').dispatchEvent(new Event('submit'));\n            }\n        });\n    }\n    \n    // Handle escape key to close chat\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape' && chatOpen) {\n            toggleChat();\n        }\n    });\n});\n</script>",
  "chat_history": [],
  "title": "Customer Layout - Chat",
  "pageType": "customer-layout-chat",
  "lastModified": "2025-08-15T02:35:00.000Z",
  "version": 1,
  "componentType": "chat",
  "editingRules": {
    "canEditMessages": true,
    "canEditStyling": true,
    "canEditQuickActions": true,
    "canEditBehavior": true,
    "protectedElements": ["chat-toggle", "chat-window"]
  }
}