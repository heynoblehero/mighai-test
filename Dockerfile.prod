# Multi-stage build for production
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./
RUN npm ci --omit=dev && npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build 2>/dev/null || echo "No build script found, skipping..."

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies for native modules
RUN apk add --no-cache python3 make g++

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Install production dependencies
COPY package*.json ./
RUN npm ci --omit=dev && npm cache clean --force

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app ./
RUN mkdir -p data uploads && chown -R nextjs:nodejs data uploads

# Install wget for health checks
RUN apk add --no-cache wget

# Create startup script with proper escaping
RUN echo '#!/bin/sh' > start.sh && \
    echo 'echo "🚀 Starting SaaS Application..."' >> start.sh && \
    echo 'echo "🌐 Domain: $DOMAIN"' >> start.sh && \
    echo 'echo "📧 Admin: $ADMIN_EMAIL"' >> start.sh && \
    echo 'echo "🗄️  Database: $DATABASE_URL"' >> start.sh && \
    echo 'exec node server.js' >> start.sh && \
    chmod +x start.sh && \
    chown nextjs:nodejs start.sh

USER nextjs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Use node directly if start.sh fails
CMD ["sh", "-c", "if [ -f ./start.sh ]; then ./start.sh; else echo 'Starting directly with node...'; exec node server.js; fi"]